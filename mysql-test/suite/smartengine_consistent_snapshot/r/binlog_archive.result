# Binlog persist to object store
# Wait for first binlog persistent after startup 
SELECT distinct Log_name from INFORMATION_SCHEMA.BINLOG_PERSISTENT_SLICE_INDEX;
Log_name
binlog.000001
SELECT SUBSTRING_INDEX(Log_slice_key, '/', -1) from INFORMATION_SCHEMA.BINLOG_PERSISTENT_SLICES order by Log_slice_key;
SUBSTRING_INDEX(Log_slice_key, '/', -1)
binlog.000001.0000000002.0000000603
CREATE DATABASE db1;
CREATE TABLE t1(c1 int, c2 char(200)) ENGINE=SMARTENGINE ;
INSERT INTO t1 values(1,'abcd');
INSERT INTO t1 values(2,'abcd');
INSERT INTO t1 values(3,'abcd');
INSERT INTO t1 values(4,'abcd');
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
FLUSH logs;
INSERT INTO t1 values(5,'abcd');
FLUSH logs;
FLUSH logs;
FLUSH logs;
INSERT INTO t1 values(6,'abcd');
INSERT INTO t1 values(7,'abcd');
INSERT INTO t1 values(8,'abcd');
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
SELECT count(*) FROM t1;
count(*)
544
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` int DEFAULT NULL,
  `c2` char(200) COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# Wait for all binlog persistent
#Rotate forbidden in transaction
set global debug= '+d, force_rotate_forbidded';
BEGIN;
INSERT INTO t1 SELECT * FROM t1 limit 100;
COMMIT;
BEGIN;
INSERT INTO t1 SELECT * FROM t1 limit 100;
COMMIT;
BEGIN;
INSERT INTO t1 SELECT * FROM t1 limit 100;
COMMIT;
#Rotate allowed
set global debug= '-d, force_rotate_forbidded';
# Puge persistent binlog binlog.000002
SELECT binlog_persistent_purge('binlog.000002');
binlog_persistent_purge('binlog.000002')
Purge binlog persistent files successfully
DROP TABLE t1;
DROP DATABASE db1;
