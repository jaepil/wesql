#
# Test for RO replica incremental binlog from source object store
#

--echo # Wait for at least 1 snapshots to be generated 
let $wait_condition= SELECT count(*) >=1 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

CREATE TABLE t1(c1 int) ENGINE=SMARTENGINE ;
INSERT INTO t1 values(1);
INSERT INTO t1 values(2);
INSERT INTO t1 values(3);
INSERT INTO t1 values(4);
INSERT INTO t1 values(5);

--let $source_region = `select @@objectstore_region`
--let $source_bucket=`select @@objectstore_bucket`
--let $source_repo = `select @@repo_objectstore_id`
--let $source_server_id= `SELECT @@server_id`
--let $source_port= `SELECT @@port`

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();

--echo # Wait for at least 2 snapshots to be generated 
let $wait_condition= SELECT count(*) >=2 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

INSERT INTO t1 values(6);
INSERT INTO t1 values(7);
INSERT INTO t1 values(8);
INSERT INTO t1 values(9);
INSERT INTO t1 values(10);
INSERT INTO t1 values(11);
INSERT INTO t1 values(12);
INSERT INTO t1 values(13);
INSERT INTO t1 values(14);
INSERT INTO t1 values(15);
INSERT INTO t1 values(16);
INSERT INTO t1 values(17);
INSERT INTO t1 values(18);
INSERT INTO t1 values(19);
INSERT INTO t1 values(20);
SELECT count(*) FROM t1;

--echo # Wait for all binlog persistent
let $wait_condition= SELECT count(*) = 1 FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_TASK_INFO, INFORMATION_SCHEMA.WESQL_CLUSTER_LOCAL where LAST_PERSISTED_RAFT_INDEX = COMMIT_INDEX;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc

--echo # clone database ro
let $ro_server_id = query_get_value("select $source_server_id+10 as c1", c1, 1);
let $ro_port = query_get_value("select $source_port+988 as c1", c1, 1);
let $tmp_dir = $MYSQLTEST_VARDIR/tmp;
let MYSQLD_DATADIR = $tmp_dir/snapshot_clone_ro_test;
let MYSQLD_ERROR_LOG = $MYSQLTEST_VARDIR/log/ro_boost.err;
let MYSQLD_ERROR_START_LOG = $MYSQLTEST_VARDIR/log/ro_start.err;
let self_bucket=wesql-ro;
let MYSQLD_EXTRA_INIT_ARGS = --initialize_from_source_objectstore=true; 
--echo # Initialize ro server
let $MYSQLD_EXTRA_ARGS = --server-id=$ro_server_id --port=$ro_port --socket=$MYSQLD_DATADIR/test.sock --console --skip-ssl --log-bin=master-bin --objectstore-region=.local_region --objectstore_bucket=$self_bucket --log-error-verbosity=3 --datadir=$MYSQLD_DATADIR --source_objectstore_smartengine_data=true --source_objectstore_region=$source_region --source_objectstore_bucket=$source_bucket --source_objectstore_repo_id=$source_repo --objectstore_bucket=$self_bucket;
--exec $MYSQLD --initialize-insecure --no-defaults $MYSQLD_ARGS $MYSQLD_EXTRA_INIT_ARGS $MYSQLD_EXTRA_ARGS > $MYSQLD_ERROR_LOG 2>&1
--echo # Start ro server

--write_file $tmp_dir/snapshot_clone_ro_test/my.cnf
[mysqld]
sync_binlog=1
sync_relay_log=1
relay_log=relay-bin
binlog_format=ROW
relay_log_recovery=on
objectstore_lease_lock_timeout=0
binlog_archive_replica=ON
snapshot_archive_expire_auto_purge=false
binlog_archive_expire_auto_purge=false
binlog_archive_period=1000
EOF

let $ro_cluster_info= '127.0.0.1:19981@1';
--exec $MYSQLD --defaults-file=$tmp_dir/snapshot_clone_ro_test/my.cnf $MYSQLD_ARGS $MYSQLD_EXTRA_ARGS --raft-replication-force-change-meta=ON --raft-replication-cluster-info=$ro_cluster_info --log-error=$MYSQLD_ERROR_START_LOG 2>&1 &

--echo # Wait ro accept connection
--disable_abort_on_error
--disable_query_log
--disable_result_log
--let $mysql_errno= 9999
--let $wait_counter= 300
while ($mysql_errno)
{
  connect (ro,127.0.0.1,root,,test,$ro_port);
  if ($mysql_errno == 1045){
    --let mysql_errno=0
  }
  if ($mysql_errname == ER_SECURE_TRANSPORT_REQUIRED){
    --let mysql_errno=0
  }
  if ($mysql_errno){
    --sleep 0.1
    --dec $wait_counter
    if (!$wait_counter){
      --die Server failed to connect new ro node
    }
  }
}
--enable_result_log
--enable_query_log
--enable_abort_on_error

--echo # Wait ro changed leader
let $wait_timeout= 60;
let $wait_condition= select count(*)=1 from information_schema.wesql_cluster_local where role='leader';
--source include/wait_condition.inc

--echo # Connection ro
--connection ro
SELECT count(*) FROM t1;

--echo # Connection master for insert
--connection default
--echo # Insert values
INSERT INTO t1 values(21);
INSERT INTO t1 values(22);
INSERT INTO t1 values(23);
INSERT INTO t1 values(24);
INSERT INTO t1 values(25);
SELECT count(*) FROM t1;
--let $master_count = `SELECT count(*) FROM t1;`

--echo # Connection ro for checking binlog replication
--connection ro
let $wait_timeout= 60;
let $wait_condition= SELECT count(*)=$master_count FROM t1;
--source include/wait_condition.inc
SELECT count(*) FROM t1;

--echo # Shutdown ro
--shutdown_server 0
--source include/wait_until_disconnected.inc

--echo # Connection master for insert values
--connection default
--echo # Insert values into master
INSERT INTO t1 values(26);
INSERT INTO t1 values(27);
INSERT INTO t1 values(28);
INSERT INTO t1 values(29);
INSERT INTO t1 values(30);
SELECT count(*) FROM t1;
--let $master_count = `SELECT count(*) FROM t1;`

--echo # Restart ro for binlog continuous replication
--exec $MYSQLD --defaults-file=$tmp_dir/snapshot_clone_ro_test/my.cnf $MYSQLD_ARGS $MYSQLD_EXTRA_ARGS --raft-replication-force-change-meta=ON --raft-replication-cluster-info=$ro_cluster_info --log-error=$MYSQLD_ERROR_START_LOG 2>&1 &

--echo # Wait ro accept reconnection
--connection ro
--enable_reconnect
--source include/wait_until_connected_again.inc

--echo # Check ro binlog replication
let $wait_timeout= 60;
let $wait_condition= SELECT count(*)=$master_count FROM t1;
--source include/wait_condition.inc
SELECT count(*) FROM t1;

--echo # Connection master for insert values
--connection default
--echo # Insert values
INSERT INTO t1 values(31);
INSERT INTO t1 values(32);
INSERT INTO t1 values(33);
INSERT INTO t1 values(34);
INSERT INTO t1 values(35);
SELECT count(*) FROM t1;
--let $master_count = `SELECT count(*) FROM t1;`

--echo # Connection ro for checking binlog replication
--connection ro
let $wait_timeout= 60;
let $wait_condition= SELECT count(*)=$master_count FROM t1;
--source include/wait_condition.inc
SELECT count(*) FROM t1;

--echo # Shutdown ro
--shutdown_server 0
--source include/wait_until_disconnected.inc

--echo # Cleanup ro
--force-rmdir $MYSQLD_DATADIR
--remove_file $MYSQLD_ERROR_LOG
--remove_file $MYSQLD_ERROR_START_LOG

--connection default

--echo # Cleanup
DROP TABLE t1;
